You are to design and implement a full-stack FastAPI + React metadata-driven UI testing framework. You must deliver this in modular deliverables — one step at a time, each complete and production-ready. Wait for my explicit "continue" before moving to the next deliverable.

System Overview
The framework will:
1. Extract UI field metadata from:
    * Live webpages (Scrapy + Playwright + lxml)
    * GitHub repositories (scan HTML/JSX/TSX/templates)
2. Store extracted metadata in a relational database (PostgreSQL or SQLite)
3. Generate realistic dummy data for each field:
    * Primary: LLaMA model in an isolated environment (Docker container or subprocess)
    * Fallback: regex-based random data generation
4. Run automated UI tests (using Playwright) on stored metadata sets
5. Produce pass/fail results + screenshots
6. Provide a React dashboard to:
    * Manage URLs/repos
    * Trigger tests
    * View results and screenshots

Metadata JSON Contract
All scraping and test components must use the following exact JSON schema for extracted metadata:
json
CopyEdit
{
  "page_url": "https://example.com/register",
  "extracted_at": "2025-08-11T12:34:56Z",
  "source_type": "web_page",
  "fields": [
    {
      "field_id": "username",
      "label": "Username",
      "type": "text",
      "input_type": "text",
      "xpath": "//input[@name='username']",
      "css_selector": "input[name='username']",
      "required": true,
      "placeholder": "Enter username",
      "default_value": "",
      "options": [],
      "validation": {
        "min_length": 3,
        "max_length": 20,
        "regex": "^[a-zA-Z0-9_]+$"
      }
    },
    {
      "field_id": "password",
      "label": "Password",
      "type": "password",
      "input_type": "password",
      "xpath": "//input[@name='password']",
      "css_selector": "input[name='password']",
      "required": true,
      "placeholder": "Enter password",
      "default_value": "",
      "options": [],
      "validation": {
        "min_length": 8,
        "regex": ".*"
      }
    }
  ]
}

Field meanings:
* page_url → URL where fields were extracted
* source_type → "web_page" or "github_repo"
* fields[] → List of detected form fields
* field_id → Logical field identifier (HTML name/id)
* label → Human-readable name
* type → Semantic type (text, password, select, checkbox)
* input_type → HTML type attribute or equivalent
* xpath / css_selector → Locators for UI automation
* required → Whether the field is mandatory
* placeholder → HTML placeholder if present
* default_value → Any default pre-filled value
* options → For dropdowns/radio buttons — list of {value, label}
* validation → Rules detected from HTML attributes or JS patterns

System Architecture Diagram
scss
CopyEdit
[React Frontend] 
    ↕ REST API
[FastAPI Backend] 
    ├── Scraping Service (Scrapy + Playwright + lxml)
    ├── GitHub Scanner
    ├── Metadata DB (PostgreSQL/SQLite)
    ├── AI Data Generator (LLaMA + fallback)
    ├── UI Test Runner (Playwright)
    └── Report Generator (JSON + Screenshots)

Folder Structure
bash
CopyEdit
ui-testing-framework/
├── backend/
│   ├── app/
│   │   ├── api/               # FastAPI routes
│   │   ├── models/            # SQLAlchemy models
│   │   ├── services/          # Scraper, GitHub scanner, test runner
│   │   ├── utils/              # Metadata parser, validators
│   │   └── main.py             # FastAPI entry point
│   ├── tests/                  # Unit tests for backend
│   └── requirements.txt
├── frontend/
│   ├── src/
│   │   ├── components/         # React UI components
│   │   ├── pages/              # Dashboard, results
│   │   ├── api/                # Axios API calls
│   │   └── App.js
│   └── package.json
├── docker/
│   ├── backend.Dockerfile
│   ├── frontend.Dockerfile
│   ├── llama.Dockerfile
│   └── docker-compose.yml
└── README.md

Deliverables Order
Deliverable 1: Architecture diagram + component breakdown + technology justification Deliverable 2: Backend FastAPI scaffold + DB models + CRUD endpoints Deliverable 3: Scraper (/extract/url) using Scrapy + Playwright + lxml Deliverable 4: GitHub repo scanner (/extract/github) Deliverable 5: Dummy data generator (LLaMA container + fallback) Deliverable 6: Playwright test runner (/test/{metadata_id}) Deliverable 7: Results API (/results/{metadata_id}) Deliverable 8: React dashboard for metadata, test runs, and reports Deliverable 9: Docker + README for full system setup

Rules for Generation
* Each deliverable must be complete, working code for that step only
* Maintain modularity and production-readiness
* Follow metadata JSON contract exactly
* Explain how each deliverable fits into the whole system
* Wait for my confirmation before proceeding
Begin with Deliverable 1 now.
